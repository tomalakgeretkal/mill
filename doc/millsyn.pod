=encoding utf8

=head1 NAME

millsyn - Mill syntax

=head1 DESCRIPTION

Mill has a syntax.

=head2 Keywords

    _ CHECK LOAD MAIN UNLOAD case catch check default defer do else ensure
    expose fail false for func given goto if implement in infix invariant is
    isnt last let match new next old out postfix prefix proc protocol recur
    redo ref require return select seq struct switch this true try union use
    while yield

=head2 Whitespace

Every space (U+0020) and newline (U+000A) is treated as whitespace. Whitespace
is ignored except when it separates tokens that would otherwise form a single
token.

=head3 Comments

Both single-line and multiline comments are supported. Single-line comments
start with C<#> and extend to the end of the line. Multiline comments start
with C<#(> and extend to C<)>. The parentheses in multiline comments must
match. Comments are considered whitespace.

=head2 Declarations

There are several forms of declarations: use declarations, variable
declarations, subroutine declarations and type declarations.

=head3 Use Declarations

A use declaration imports a module or some members of a module into the current
scope.

=head3 Variable Declarations

A variable is defined using the C<let> keyword, for example:

    let food = "orange"
    let (source, age) = ("orange tree", months(1))

Variables defined with C<let> are immutable unless their names start with C<$>
or C<%>:

    let food = "orange"
    let $age = months(1)
    let %rotten = false
    food = "apple" # error: attempt to assign immutable variable
    $age = $age + years(1) # ok
    %rotten = true # ok

The difference between C<$> and C<%> is that when the name of a variable starts
with C<%>, its value is reset at the end of the scope:

    let ($a, %b) = (1, 2)
    {
        $a = 3
        %b = 4
    }
    p($a) # prints 3
    p(%b) # prints 2

The value is reset even when an exception is thrown before the end of the scope
is reached. Additionally, mutations to C<%> variables are visible only to the
current thread, unlike mutations to C<$> variables.

=head4 General Special Variables

=over

=item C<%_>

The topic, which is set by various control structures. It is often used as a
default argument for subroutines.

    # proc outln(s: String = %_) { … }
    # proc errln(s: String = %_) { … }

    for list(1, 2, 3, 4, 5) {
        p(%_)
    }

    given "Hello, world!" {
        outln()
        errln()
    }

    match list(1, 2) {
        case list(_, _) =>
            assert(count(%_) == 2)

        case _ =>
            assert(count(%_) != 2)
    }

=item C<$0, $1, $2, …>

The parameters of a short lambda:

    let addmul = $($0 + $1 * $2)
    p(addmul(3, 6, 8)) # 51

These variables can be assigned to like normal C<$> variables.

=back

=head4 Special Variables Related to Regexen

=over

=item C<$&>

The string matched by the last regex match in the current thread.

=item C<$->

A sequence of the strings matched by the non-named groups of the last regex
match in the current thread.

=item C<$+>

A dictionary of the strings matched by the named groups of the last regex
match in the current thread.

=back

=head4 Special Variables Related to the Environment

=over

=item C<$?>

The exit status of the last command executed with C<[sh(…)| … |]> in the
current thread. Defaults to zero.

=back

=head3 Subroutine Declarations

A subroutine is a function or a procedure. Functions and procedures are
identical except that a procedure ignores the value produced by its body and
instead returns C<()>, and that the return type of a function must be specified
whereas the return type of a procedure cannot be specified.

=head3 Type Declarations

A type declaration creates a type.

=head2 Expressions

=head3 Given Expressions

A given expression sets C<%_> to some value.

    given "Hello, world!" {
        outln()
        errln()
    }

    f(%_) + g(%_) given h()

=head3 If Expressions

An if expression consists of a condition and one or two branches. Which branch
is executed depends on the condition. The second branch defaults to unit if
it's not given explicitly. Every if expression has the precondition that the
condition is a Boolean.

    func abs(x: Number): Number {
        if x < 0 {
            -x
        } else {
            x
        }
    }

=head3 Switch Expressions

=head3 Match Expressions

=head3 Select Expressions

=head3 For Expressions

=head3 While Expressions

=head3 Check Expressions

=head3 Try and Fail Expressions

=cut
